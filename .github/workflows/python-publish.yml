name: Publish Python üêç distribution üì¶ to PyPI and TestPyPI

on:
  push:
    branches: [ main, master ]  # Keep this for building
    tags: ['*']  # Explicitly trigger on all tags
  workflow_dispatch:  # Add manual trigger
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: true
        default: false
        type: boolean

# Limit concurrent runs of this workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/funannotate2  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # fetch all history and tags

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Debug tag and version
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "Tag: ${GITHUB_REF#refs/tags/}"
        echo "Is tag: ${{ startsWith(github.ref, 'refs/tags/') }}"
        echo "Package version from pyproject.toml:"
        grep -oP 'version = "\K[^"]+' pyproject.toml

    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1


  publish-to-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    # Only publish to TestPyPI when manually triggered
    if: github.event_name == 'workflow_dispatch' && inputs.publish_to_testpypi == true
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/funannotate2

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # fetch all history and tags

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  github-release:
    name: >-
      Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')  # only create release on tag pushes
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for creating releases
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # fetch all history and tags

    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Get version from tag
      id: get_version
      run: |
        # Extract tag name
        TAG=${GITHUB_REF#refs/tags/}
        # Remove 'v' prefix if present
        VERSION=${TAG#v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Extract release notes
      id: extract_release_notes
      run: |
        # Extract release notes from CHANGELOG.md or generate from git log
        # This is a simple example that uses git log
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "# funannotate2 ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Changes" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: funannotate2 ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}
        files: dist/*
        draft: false
        prerelease: false
